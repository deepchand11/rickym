// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNCSafeAreaProvider
      onInsetsChange={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            pointerEvents="box-none"
            style={
              Object {
                "height": 64,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 20,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "justifyContent": "center",
                }
              }
            >
              <View
                pointerEvents="box-none"
                style={
                  Object {
                    "marginHorizontal": 16,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "bold",
                    }
                  }
                >
                  Rick And Morty
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              needsOffscreenAlphaCompositing={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="none"
                  style={
                    Object {
                      "backgroundColor": "rgb(242, 242, 242)",
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "shadowColor": "#000",
                      "shadowOffset": Object {
                        "height": 1,
                        "width": -1,
                      },
                      "shadowOpacity": 0.3,
                      "shadowRadius": 5,
                      "top": 0,
                      "width": 3,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          Object {
                            "backgroundColor": "rgb(36, 40, 47)",
                            "flex": 1,
                          }
                        }
                      >
                        <View
                          style={
                            Object {
                              "alignItems": "center",
                              "flexDirection": "row",
                              "padding": 5,
                            }
                          }
                        >
                          <TextInput
                            allowFontScaling={true}
                            onChangeText={[Function]}
                            rejectResponderTermination={true}
                            style={
                              Object {
                                "backgroundColor": "#ffffff",
                                "borderRadius": 10,
                                "flex": 1,
                                "height": 40,
                                "margin": 12,
                                "padding": 8,
                              }
                            }
                            testID="searchId"
                            underlineColorAndroid="transparent"
                            value=""
                          />
                          <RNGestureHandlerButton
                            collapsable={false}
                            onGestureEvent={[Function]}
                            onGestureHandlerEvent={[Function]}
                            onGestureHandlerStateChange={[Function]}
                            onHandlerStateChange={[Function]}
                            rippleColor={0}
                            testID="searchBtnId"
                          >
                            <View
                              accessible={true}
                              style={
                                Object {
                                  "opacity": 1,
                                }
                              }
                            >
                              <View
                                style={
                                  Object {
                                    "alignItems": "center",
                                    "backgroundColor": "#FF813F",
                                    "borderRadius": 3,
                                    "height": 40,
                                    "justifyContent": "center",
                                    "width": 40,
                                  }
                                }
                              >
                                <Text />
                              </View>
                            </View>
                          </RNGestureHandlerButton>
                        </View>
                        <RCTSafeAreaView
                          emulateUnlessSupported={true}
                          style={
                            Object {
                              "flex": 1,
                            }
                          }
                        >
                          <RCTScrollView
                            ListFooterComponent={[Function]}
                            data={Array []}
                            disableVirtualization={false}
                            getItem={[Function]}
                            getItemCount={[Function]}
                            horizontal={false}
                            initialNumToRender={10}
                            keyExtractor={[Function]}
                            maxToRenderPerBatch={10}
                            onContentSizeChange={[Function]}
                            onEndReached={[Function]}
                            onEndReachedThreshold={1}
                            onLayout={[Function]}
                            onMomentumScrollEnd={[Function]}
                            onScroll={[Function]}
                            onScrollBeginDrag={[Function]}
                            onScrollEndDrag={[Function]}
                            removeClippedSubviews={false}
                            renderItem={[Function]}
                            scrollEventThrottle={50}
                            stickyHeaderIndices={Array []}
                            updateCellsBatchingPeriod={50}
                            viewabilityConfigCallbackPairs={Array []}
                            windowSize={21}
                          >
                            <View>
                              <View
                                onLayout={[Function]}
                              >
                                <View>
                                  <ActivityIndicator
                                    animating={true}
                                    color="white"
                                    hidesWhenStopped={true}
                                    size="small"
                                    style={
                                      Object {
                                        "margin": 15,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                            </View>
                          </RCTScrollView>
                        </RCTSafeAreaView>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RNCSafeAreaProvider>
  </View>
</View>
`;
